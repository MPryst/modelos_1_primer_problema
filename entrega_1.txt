• Impresión inicial del problema
Hay muchas incompatibilidades "e" y se van a tener que hacer muchas comparaciones.
No hay ninguna estrategia aparente para encontrar la mejor solución.

• Ideas de cómo lo van a intentar resolver
Planeo cargar las incompatibilidades de las prendas en memoria, luego leer las prendas e ir agregandolas al primer lavado que se pueda (entendiéndose como "pueda" a no tener prendas incompatibles ni generar incompatibilidades al agregarla, o siendo un lavado nuevo).

• Comentarios sobre los cambios que hagan en el código
Como mejora, a las entidades de Ropa (Cloth) y Lavado (Wash) se les agregó el atributo de "horas para terminar". Así se pueden ordenar e intentar agregar las ropas que tarden más en los lavados que tarden más.
Alternativa/intento de mejora: Ordenar los lavados por cantidad de ropa, para tratar de poner muchas prendas en el mismo lavado.
Alternativa/intento de mejora: Ordenar las prendas por cantidad de incompatibilidades, para ubicar primero las más incompatibles.
Alternativa/intento de mejora: Tomar todas las combinaciones de lavados e intentar agregarlos (con la lógica de que si no se puede por incompatibilidad, ir a los siguientes lavados o crear uno nuevo).
Esto es un problema de complejidad O(n!), y con n = 20 es un número astronómico. Por lo que se implementó una alternativa híbrida:
	- Primero se agregan k = 10 prendas, ordenadas descendentemente por cantidad de restricciones en este caso (podría ser por horas para lavar, etc)
	- Se las agrega a los lavados (iterando sobre ellos, o creando uno nuevo)
	- Se toman las n-k = 10 prendas restantes y se prueba el algoritmo anterior de agregado para cada combinación generada.

• Comentarios finales
La solución propuesta es O(n!), pero se hizo una aproximación usando 10 elementos para las combinaciones, porque usando los 20 el factorial es un número astronómico.
El mejor resultado encontrado es 61. Algo notable es que hay muchas alternativas que llegan a ese valor. Si se probaran todas las combinaciones podría afirmarse que es el mejor resultado, pero computacionalmente no es viable.
